Flexbox Layout Model
Flexbox is a CSS layout model that provides a flexible and efficient way to arrange items on a web page. It's particularly useful for creating responsive designs that adapt to different screen sizes.

Key Concepts
Flex Container: The parent element that establishes the flexbox layout.
Flex Items: The child elements within the flex container.
Flex Axis: The main axis along which flex items are arranged (horizontal or vertical).
Cross Axis: The axis perpendicular to the flex axis.
Properties
justify-content: Controls the alignment of flex items along the main axis.
flex-start: Items are aligned to the start of the main axis.
flex-end: Items are aligned to the end of the main axis.
center: Items are centered along the main axis.
space-between: Items are distributed evenly with spaces between them.   
space-around: Items are distributed evenly with spaces around them.
align-items: Controls the alignment of flex items along the cross axis.
flex-start: Items are aligned to the start of the cross axis.
flex-end: Items are aligned to the end of the cross axis.
center: Items are centered along the cross axis.
stretch: Items are stretched to fill the cross axis.   
flex-direction: Sets the direction in which flex items are placed.
row: Items are placed horizontally.
row-reverse: Items are placed horizontally in reverse order.
column: Items are placed vertically.
column-reverse: Items are placed vertically in reverse order.
Example: Responsive Layout
HTML
<!DOCTYPE html>
<html>
<head>
    <title>Flexbox Layout</title>
    <style>
        .container {
            display: flex;
            flex-wrap: wrap; /* Allow items to wrap to the next line */
        }

        .item {
            width: 200px;
            height: 200px;
            border: 1px solid black;
            margin: 10px;
            background-color: lightblue;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="item">Item 1</div>
        <div class="item">Item 2</div>
        <div class="item">Item 3</div>   

        <div class="item">Item 4</div>
        <div class="item">Item 5</div>
    </div>
</body>
</html>

In this example:   

The .container element is set to display: flex.
The flex-wrap: wrap property allows items to wrap to the next line when there's not enough space.
The .item elements are displayed as flex items.
As the screen size changes, the items will automatically adjust their layout, creating a responsive design. You can experiment with different justify-content, align-items, and flex-direction values to achieve various layout effects.